What is NodeJS?
	-Node.js is an open-source and cross-platform JavaScript runtime environment. Node.js runs the V8 JavaScript engine, the core of Google Chrome, outside of the browser.
	-A Node.js app is run in a single process, without creating a new thread for every request
	-When Node.js performs an I/O operation, like reading from the network, accessing a database or the filesystem, instead of blocking the thread and wasting CPU cycles waiting, Node.js will resume the operations when the response comes back.

	In practice, this means that for the time being you use require() in Node.js and import in the browser.

The V8 JavaScript Engine
	-V8 is the name of the JavaScript engine that powers Google Chrome. It's the thing that takes our JavaScript and executes it while browsing with Chrome.
	-JavaScript engine is independent of the browser in which it's hosted.
	-The Node.js ecosystem is huge and thanks to it V8 also powers desktop apps, with projects like Electron.

Other JS engines
	-Firefox has Spider Monkey
	-Safari has javascript core also known as Nitro.
	-Edge was basically built on Chakra( now rebuilt using Chromium and the V8 engine.)
	-V8 is written in C++

Conclusion
	-JavaScript is generally considered an interpreted language, but modern JavaScript engines no longer just interpret JavaScript, they compile it.
	-JavaScript is internally compiled by V8 with just-in-time (JIT) compilation to speed up the execution.

Run Node.js scripts from the command line
	-If your main Node.js application file is app.js, you can call it by typing:
		$ node app.js

How to exit from a Node.js program?
		-The process core module provides a handy method that allows you to programmatically exit from a Node.js program: process.exit().
		-By default the exit code is 0, which means success,Different exit codes have different meaning
		-You can also set the process.exitCode property:
			$ process.exitCode = 1

		-SIGKILL is the signal that tells a process to immediately terminate, and would ideally act like process.exit().
		-SIGTERM is the signal that tells aprocess to gracefully terminate.It is the signal that's sent from process managers like upstart or supervisord and many others. 
		-You can send this signal from inside the program, in another function:
			$ process.kill(process.pid, 'SIGTERM')

		-Express is a framework that uses the http module under the hood, app.listen() returns an instance of http.

How to read environment variables from Node.js
	-The process core module of Node.js provides the env property which hosts all the environment variables that were set at the moment the process was started.
		$ process.env.NODE_ENV // "development"
------------------------------------------------------------------------
How to use the Node.js REPL (Read Evaluate Print Loop)
	-To enter into REPL mode just type the node command.
		$ node
	-REPL also known as Read Evaluate Print Loop is a programming language environment(Basically a console window) that takes single expression as user input and returns the result back to the console after execution.
	-REPL is interactive i.e it supports autocompletion when Tab is pressed.
	-Number is class having various properties and methods in javascript.
	-Acess to global objects on typing $ global. ("Now pressing tab")

	Dot commands in REPL
		-The REPL has some special commands, all starting with a dot .. They are:
			.help: shows the dot commands help
			.editor: enables editor mode, to write multiline JavaScript code with ease. Once you are in this mode, enter ctrl-D to run the code you wrote.
			.break: when inputting a multi-line expression, entering the .break command will abort further input. Same as pressing ctrl-C.
			.clear: resets the REPL context to an empty object and clears any multi-line expression currently being input.
			.load: loads a JavaScript file, relative to the current working directory
			.save: saves all you entered in the REPL session to a file (specify the filename)
			.exit: exits the repl (same as pressing ctrl-C two times)
------------------------------------------------------------------------

Node.js, accept arguments from the command line
	-You can pass any number of arguments when invoking a Node.js application using
		$ node app.js
	-Arguments can be standalone or key-value pairs:
		$ node app.js joe
		$ node app.js name==joepr
